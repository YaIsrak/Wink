generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Profile {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  email     String     @unique
  username  String     @unique
  bio       String?
  name      String
  imageUrl  String
  userId    String

  posts     Post[]
  comments  Comment[]
  likes     Like[]

  followers Follower[] @relation("UserFollowers")
  following Follower[] @relation("UserFollowing")

  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

}

model Post {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  imageUrls String[]

  authorId  String    @db.ObjectId
  author    Profile   @relation(fields: [authorId], references: [id])

  comments  Comment[]
  likes     Like[]

  createdAt DateTime  @default(now())
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  content   String

  authorId  String   @db.ObjectId
  author    Profile  @relation(fields: [authorId], references: [id])

  postId    String   @db.ObjectId
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model Like {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId

  userId    String   @db.ObjectId
  user      Profile  @relation(fields: [userId], references: [id])

  postId    String   @db.ObjectId
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
}

model Follower {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId

  followerId  String   @db.ObjectId
  followingId String   @db.ObjectId

  follower    Profile  @relation("UserFollowers", fields: [followerId], references: [id])
  following   Profile  @relation("UserFollowing", fields: [followingId], references: [id])

  createdAt   DateTime @default(now())
}
